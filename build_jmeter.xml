<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="ant-jmeter" default="all">
	
	<description>
		1. The jmeter build refer to {jmeter-home}/extras/build.xml
		2. Add the Java build and deploy steps
	</description>
	
	<!-- property, Java build -->
	<property name="project.root.dir" location="${ant.project.name}/.."/>

	<property name="java.src.dir" location="${project.root.dir}/src"/>
	<property name="java.libs.dir" location="${project.root.dir}/libs"/>
	
	<property name="java.output.dir" location="${project.root.dir}/output"/>
	<property name="java.output.class.dir" location="${java.output.dir}/classes"/>
	<property name="java.output.jar.dir" location="${java.output.dir}/jars"/>
	
	<property name="java.jar.name" value="FunSettingsTest.jar"/>


	<!-- property, Jmeter run -->
	<tstamp>
		<format property="time" pattern="yyyyMMddhhmm" />
	</tstamp>
	
	<property name="jmx.test.case" value="ScreenSaver_Perf_HttpOK.jmx"/>
	
	<property name="report.title" value="Load Test Results"/>
	<property name="report.name" value="JmeterTestReport"/>

	<property name="jmeter.home.dir" location="D:\Program_Files\apache-jmeter-3.0"/>
	<property name="jmeter.extras.dir" location="${jmeter.home.dir}/extras"/>
    <property name="jmeter.lib.dir" location="${jmeter.home.dir}/lib"/>
	<property name="jmeter.junit.lib.dir" location="${jmeter.lib.dir}/junit"/>

	<property name="project.jmeter.jmx.dir" location="${project.root.dir}/jmx"/>

	<property name="project.jmeter.result.jtl.dir" location="${project.root.dir}/reports/jtls"/>
	<property name="project.jmeter.result.html.dir" location="${project.root.dir}/reports"/>

	<property name="project.jmeter.result.jtl.report" 
		location="${project.jmeter.result.jtl.dir}/${report.name}_${time}.jtl"/>
	<property name="proejct.jmeter.result.html.report" 
		location="${project.jmeter.result.html.dir}/${report.name}_${time}.html"/>

	
    <!-- Should report include response data for failures? -->
    <property name="show-data" value="n"/>
    <property name="format" value="2.1"/>

    <condition property="style_version" value="">
        <equals arg1="${format}" arg2="2.0"/>
    </condition>
    <condition property="style_version" value="_21">
        <equals arg1="${format}" arg2="2.1"/>
    </condition>

    <condition property="funcMode" value="false">
      <not>
        <equals arg1="${show-data}" arg2="y"/>
      </not>
    </condition>

	
	<!-- targets, we can run Java build and Jmeter task separately. -->
    <target name="all" depends="java.build,jmeter.run"/>
    
	<target name="java.build" depends="setup,deploy"/>
	<target name="jmeter.run" depends="run.single,report"/>
	<!--
    <target name="jmeter.run" depends="run.multiple,report"/>
	-->

    <!-- targets, setup -->
	<target name="setup" depends="clear,init"/>
	
	<target name="clear" description="Clear files in Java output folder.">
		<delete>
			<fileset dir="${java.output.dir}">
	    		<include name="**/*.class"/>
				<include name="**/*.jar"/>
			</fileset>
		</delete>
	</target>

	<target name="verify.file.exist" description="Verify output classes and jars folder exist.">
		<available file="${java.output.class.dir}" property="java.output.class.dir.available"/>
		<available file="${java.output.jar.dir}" property="java.output.jar.dir.available"/>
		<condition property="java.output.dir.exist">
			<and>
				<istrue value="${java.output.class.dir.available}"/>
				<istrue value="${java.output.jar.dir.available}"/>
			</and>
		</condition>
	</target>
	
	<target name="init" depends="verify.file.exist" unless="java.output.dir.exist"
		description="If necessary, create output folders for classes and jars.">
		<mkdir dir="${java.output.class.dir}"/>
		<mkdir dir="${java.output.jar.dir}"/>
	</target>
	
	
	<!-- targets, build jar package -->
	<path id="master.classpath">
		<fileset dir="${java.libs.dir}">
			<include name="*.jar"/>	
		</fileset>
	</path>
	
	<target name="compile" description="Compile Java source to classes.">
		<javac srcdir="${java.src.dir}" destdir="${java.output.class.dir}" 
			source="1.8" target="1.8" encoding="UTF-8"
			includeantruntime="false" classpathref="master.classpath"/>
	</target>
	
	<target name="jar" depends="compile" description="Build jar package.">
		<jar destfile="${java.output.jar.dir}/${java.jar.name}" basedir="${java.output.class.dir}">
			<include name="**/*.class"/>
		</jar>
	</target>
	
	<target name="deploy" depends="jar" description="Deploy the jar package to Jmeter libs.">
		<copy todir="${jmeter.junit.lib.dir}">
			<fileset file="${java.output.jar.dir}/${java.jar.name}"/>
		</copy>
	</target>
	
	
	<!-- target, jmeter run -->
	<!-- 
		Before run Jmeter task, make sure the 3rd-party jars in "libs" is copied into {jmeter.home}\lib\ext.
		The Eclipse java Env should be consistent with Jmeter runtime Env.
	-->
    <path id="jmeter.classpath">
        <fileset dir="${jmeter.extras.dir}">
        	<include name="ant-jmeter*.jar"/>
        </fileset>
    </path>

    <taskdef name="jmeter" classpathref="jmeter.classpath"
        classname="org.programmerplanet.ant.taskdefs.jmeter.JMeterTask"/>

	<target name="run.single">
        <echo>funcMode = ${funcMode}</echo>
        <jmeter jmeterhome="${jmeter.home.dir}"
            testplan="${project.jmeter.jmx.dir}/${jmx.test.case}"
            resultlog="${project.jmeter.result.jtl.report}">
        <!--
            <jvmarg value="-Xincgc"/>
            <jvmarg value="-Xmx128m"/>
            <jvmarg value="-Dproperty=value"/>
            <jmeterarg value="-qextra.properties"/>
        -->
            <!-- Force suitable defaults -->
            <property name="jmeter.save.saveservice.output_format" value="xml"/>
            <property name="jmeter.save.saveservice.assertion_results" value="all"/>
            <property name="jmeter.save.saveservice.bytes" value="true"/>
        <!--
			<property name="file_format.testlog" value="${format}"/>
        	<property name="jmeter.save.saveservice.response_data.on_error" value="${funcMode}"/>
       	-->
        </jmeter>
	</target>
	
	<target name="run.multiple">
        <echo>funcMode = ${funcMode}</echo>
        <jmeter jmeterhome="${jmeter.home.dir}"
            resultlog="${project.jmeter.result.jtl.report}">
        	<testplans dir="${project.jmeter.jmx.dir}" includes="*.jmx"/>
            <property name="jmeter.save.saveservice.output_format" value="xml"/>
            <property name="jmeter.save.saveservice.assertion_results" value="all"/>
            <property name="jmeter.save.saveservice.bytes" value="true"/>
        </jmeter>
	</target>

        	
	<!-- target, generate jmeter report -->
    <!-- Use xalan copy from JMeter lib directory to ensure consistent processing with Java 1.4+ -->
    <path id="xslt.classpath">
        <fileset dir="${jmeter.lib.dir}" includes="xalan*.jar"/>
        <fileset dir="${jmeter.lib.dir}" includes="serializer*.jar"/>
    </path>

    <target name="report" depends="xslt.report,copy.images">
        <echo>Report generated at ${report.datestamp}</echo>
    </target>
	
    <target name="xslt.report" depends="message_xalan">
        <tstamp>
        	<format property="report.datestamp" pattern="yyyy/MM/dd HH:mm"/>
        </tstamp>
        <xslt
            classpathref="xslt.classpath"
            force="true"
            in="${project.jmeter.result.jtl.report}"
            out="${proejct.jmeter.result.html.report}"
            style="${jmeter.extras.dir}/jmeter-results-detail-report${style_version}.xsl">
            <param name="showData" expression="${show-data}"/>
            <param name="titleReport" expression="${report.title}"/>
            <param name="dateReport" expression="${report.datestamp}"/>
        </xslt>
    </target>

    <!-- Copy report images if needed -->
    <target name="copy.images" depends="verify.images" unless="samepath">
        <copy file="${jmeter.extras.dir}/expand.png" tofile="${project.jmeter.result.html.dir}/expand.png"/>
        <copy file="${jmeter.extras.dir}/collapse.png" tofile="${project.jmeter.result.html.dir}/collapse.png"/>
    </target>

    <target name="verify.images">
        <condition property="samepath">
			<equals arg1="${jmeter.extras.dir}" arg2="${project.jmeter.result.html.dir}" />
        </condition>
    </target>

    <!-- Check that the xalan libraries are present -->
    <condition property="xalan.present">
		<and>
        	<!-- No need to check all jars; just check a few -->
            <available classpathref="xslt.classpath" classname="org.apache.xalan.processor.TransformerFactoryImpl"/>
            <available classpathref="xslt.classpath" classname="org.apache.xml.serializer.ExtendedContentHandler"/>
		</and>
    </condition>

    <target name="message_xalan" unless="xalan.present">
        <echo>Cannot find all xalan and/or serialiser jars</echo>
        <echo>The XSLT formatting may not work correctly.</echo>
        <echo>Check you have xalan and serializer jars in ${lib.dir}</echo>
    </target>

</project>